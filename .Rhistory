install.packages("shiny")
install.packages("xlsx")
library(xlsx)
install.packages("rJava")
install.packages("rJava")
shiny::runApp('Documents/lgbtapp')
runApp('Documents/lgbtapp')
runApp('Documents/lgbtapp')
runApp('Documents/lgbtapp')
install.packages("wesanderson")
mes_uf <- readRDS(file.path(getwd(),"/data/casos_mes_uf.rds"))
es_uf <- readRDS(file.path(getwd(),"data/casos_mes_uf.rds"))
mes_uf <- readRDS(file.path(getwd(),"data/casos_mes_uf.rds"))
runApp('Documents/lgbtapp')
ibrary(wesanderson)
library(wesanderson)
runApp('Documents/lgbtapp')
runApp('Documents/lgbtapp')
runApp('Documents/lgbtapp')
runApp('Documents/lgbtapp')
brewer.pal(n = 28, name = "RdBu")
cl <- colors(distinct = TRUE)
set.seed(15887) # to set random generator seed
mycols2 <- sample(cl, 7)
runApp('Documents/lgbtapp')
runApp('Documents/lgbtapp')
runApp('Documents/lgbtapp')
runApp('Documents/lgbtapp')
runApp('Documents/lgbtapp')
runApp('Documents/lgbtapp')
runApp('Documents/lgbtapp')
runApp('Documents/lgbtapp')
runApp('Documents/lgbtapp')
runApp('Documents/lgbtapp')
runApp('Documents/lgbtapp')
runApp('Documents/lgbtapp')
shiny::runApp('Documents/lgbtapp')
runApp('Documents/lgbtapp')
runApp('Documents/lgbtapp')
runApp('Documents/lgbtapp')
runApp('Documents/lgbtapp')
runApp('Documents/lgbtapp')
runApp('Documents/lgbtapp')
library(plotly)
install.packages("plotly")
install.packages("plotly", dependencies = =T)
install.packages("plotly", dependencies = T)
library(plotly)
install.packages("devtools", dependencies = T)
install.packages("usethis", dependencies = T)
install.packages("usethis", dependencies = T)
install.packages("usethis", dependencies = T)
install.packages("devtools", dependencies = T)
install.packages("devtools", dependencies = T)
install.packages("stringi")`
]
''
''
``
install.packages("stringi")
install.packages("devtools", dependencies = T)
install.packages("plotly", dependencies = =T)
install.packages("plotly", dependencies =T)
install.packages("plotly", dependencies =T)
install.packages("plotly", dependencies =T)
install.packages("plotly", dependencies =T)
install.packages("plotly", dependencies =T)
install.packages("plotly", dependencies =T)
shiny::runApp('Documents/lgbtapp')
runApp('Documents/lgbtapp')
runApp('Documents/lgbtapp')
runApp('Documents/lgbtapp')
runApp('Documents/lgbtapp')
runApp('Documents/lgbtapp')
runApp('Documents/lgbtapp')
runApp('Documents/lgbtapp')
runApp('Documents/lgbtapp')
runApp('Documents/lgbtapp')
runApp('Documents/lgbtapp')
runApp('Documents/lgbtapp')
runApp('Documents/lgbtapp')
runApp('Documents/lgbtapp')
runApp('Documents/lgbtapp')
runApp('Documents/lgbtapp')
runApp('Documents/lgbtapp')
runApp('Documents/lgbtapp')
runApp('Documents/lgbtapp')
runApp('Documents/lgbtapp')
runApp('Documents/lgbtapp')
runApp('Documents/lgbtapp')
runApp('Documents/lgbtapp')
runApp('Documents/lgbtapp')
runApp('Documents/lgbtapp')
runApp('Documents/lgbtapp')
runApp('Documents/lgbtapp')
runApp('Documents/lgbtapp')
runApp('Documents/lgbtapp')
runApp('Documents/lgbtapp')
runApp('Documents/lgbtapp')
runApp('Documents/lgbtapp')
runApp('Documents/lgbtapp')
runApp('Documents/lgbtapp')
runApp('Documents/lgbtapp')
runApp('Documents/lgbtapp')
runApp('Documents/lgbtapp')
lst <- lapply(1:9, function(i) read.xlsx(paste0(path, "tipo_violacao.xlsx"), sheetName = i,encoding='UTF-8'))
library(xlsx)
library(dplyr)
library(reshape2)
library(ggplot2)
library(data.table)
path = "/home/germano/Documents/lgbtapp/raw_data/"
lst <- lapply(1:9, function(i) read.xlsx(paste0(path, "tipo_violacao.xlsx"), sheetName = i,encoding='UTF-8'))
lst[1]
View(lst)
type_violence <- function(lista, coluna){
dataframe <-  cbind(lista[[1]][,1] %>% as.data.frame(.),do.call(cbind,lapply(1:9, function(i) lista[[i]][,coluna])))
rownames(dataframe) <- dataframe[,1]
dataframe[,1] <- NULL
colnames(dataframe) <- c('2011', '2012', '2013 ',
'2014', '2015', '2016',
'2017', '2018', '2019')
return(dataframe)
}
abuso <- type_violence(lst,2)
View(abuso)
discriminacao <- type_violence(lst,3)
negligencia <- type_violence(lst,4)
outras <- type_violence(lst,5)
escravos <- type_violence(lst,6)
trafico <- type_violence(lst,7)
fisica <- type_violence(lst,8)
institucional <- type_violence(lst,9)
psicologica <- type_violence(lst,10)
sexual <- type_violence(lst,11)
View(sexual)
df <- tibble::rownames_to_column(sexual, "Ano")
View(df)
df <- tibble::rownames_to_column(sexual, "Estado")
View(df)
View(df)
#df$`NA` <- NULL
df = as.data.table(df)
df2 <- melt(df, id.vars="Estado")
View(df2)
df2$value <- as.numeric(df2$value)
colnames(df2) <- c("Estado", "Violação", 'Casos')
ggplot(df2, aes(x=Estado, y=Casos,color=`Violação`, group=`Violação`)) + geom_point()+geom_line()
View(df2)
ggplot(df2, aes(x=`Violação`, y=Casos,color=`Estado`, group=`Violação`)) + geom_point()+geom_line()
ggplot(df2, aes(x=`Violação`, y=Casos,color=`Estado`, group=`Violação`)) + geom_point()+geom_line()
View(df2)
ggplot(df2, aes(x=`Violação`, y=Casos,color=`Estado`, group=`Estado`)) + geom_point()+geom_line()
ggplot(df2, aes(x=Ano, y=Casos,color=`Estado`, group=`Estado`)) + geom_point()+geom_line()
ggplot(df2, aes(x=Ano, y=Casos,color=`Estado`, group=`Estado`)) + geom_point()+geom_line()
colnames(df2) <- c("Estado", "Ano", 'Casos')
ggplot(df2, aes(x=Ano, y=Casos,color=`Estado`, group=`Estado`)) + geom_point()+geom_line()
View(df2)
lista = c(abuso,discriminacao)
View(lista)
discriminacao <- type_violence(lst,3)
lista = c(abuso,discriminacao)
View(lista)
class(fisica)
lista = list(abuso,discriminacao)
View(lista)
nova <- lapply(tibble::rownames_to_column(types_list, "Estado")
)
nova <- lapply(1:10, function(i) tibble::rownames_to_column(types_list[i],"Estado"))
types_list = list(abuso, discriminacao,
negligencia, escravos,
trafico, fisica,
institucional,
psicologica,
sexual, outras)
nova <- lapply(1:10, function(i) tibble::rownames_to_column(types_list[i],"Estado"))
types_list[1]
types_list[[1]]
nova <- lapply(tibble::rownames_to_column(types_list[[i]], "Estado")
)
nova <- lapply(1:10, function(i) tibble::rownames_to_column(types_list[[i]],"Estado"))
View(nova)
nova <- lapply(1:10, function(i) tibble::rownames_to_column(types_list[[i]],"Estado")) %>%
lapply(1:10, function(i) as.data.table(.,"Estado"))
nova <- lapply(1:10, function(i) tibble::rownames_to_column(types_list[[i]],"Estado")) %>%
lapply(1:10, function(i) as.data.table(.))
nova <- lapply(1:10, function(i) tibble::rownames_to_column(types_list[[i]],"Estado")) %>%
lapply(as.data.table(.))
nova <- lapply(1:10, function(i) tibble::rownames_to_column(types_list[[i]],"Estado")) %>%
as.data.table(.)
nova <- lapply(1:10, function(i) as.data.table(tibble::rownames_to_column(types_list[[i]],"Estado")))
nova <- lapply(1:10, function(i) as.data.table(tibble::rownames_to_column(types_list[[i]],"Estado"))) %>% lapply(1:10, function(i) melt(.[[i]],id.vars="Estado"))
nova <- lapply(1:10, function(i) as.data.table(tibble::rownames_to_column(types_list[[i]],"Estado")))
nova2 <- lapply(1:10, function(i) melt(nova[[i]],id.vars="Estado"))
saveRDS(types_list_melt, "data/perfil_mes_raca.rds")
types_list_df <- lapply(1:10, function(i) as.data.table(tibble::rownames_to_column(types_list[[i]],"Estado")))
types_list_melt <- lapply(1:10, function(i) as.data.table(tibble::rownames_to_column(types_list[[i]],"Estado")))
saveRDS(types_list_melt, "data/perfil_mes_raca.rds")
saveRDS(types_list_melt, "data/tipos_violencia.rds")
getwd()
path = "/home/germano/Documents/lgbtapp/raw_data/"
setwd("/home/germano/Documents/lgbtapp/")
saveRDS(types_list_melt, "data/tipos_violencia.rds")
runApp()
runApp()
abuso <- type_violence(lst,2)
discriminacao <- type_violence(lst,3)
negligencia <- type_violence(lst,4)
outras <- type_violence(lst,5)
tortura <- type_violence(lst,6)
escravos <- type_violence(lst,7)
trafico <- type_violence(lst,8)
fisica <- type_violence(lst,9)
institucional <- type_violence(lst,10)
psicologica <- type_violence(lst,11)
sexual <- type_violence(lst,12)
types_list = list(abuso, discriminacao,
negligencia, tortura, escravos,
trafico, fisica,
institucional,
psicologica,
sexual, outras)
types_list_df <- lapply(1:11, function(i) as.data.table(tibble::rownames_to_column(types_list[[i]],"Estado")))
types_list_melt <- lapply(1:11, function(i) as.data.table(tibble::rownames_to_column(types_list[[i]],"Estado")))
saveRDS(types_list_melt, "data/tipos_violencia.rds")
